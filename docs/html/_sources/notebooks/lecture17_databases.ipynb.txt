{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Databases\n",
    "Guest lecture by [Bradley Dice](https://github.com/bdice/)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Why databases?\n",
    "Tons of applications: managing digital content (websites), product inventories, transactions, health records... structure, security, and speed are all important.\n",
    "\n",
    "- What if the size of your data exceeds the memory of the system?\n",
    "  - Out-of-core algorithms.\n",
    "- What if your data needs to be accessed by servers around the world?\n",
    "  - Split it up by geography.\n",
    "- Text files and spreadsheets can only do so much."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## What can we expect from most databases? CRUD + ACID.\n",
    "\n",
    "Operations you can perform: **CRUD.** When interfacing with a database, you can expect to have these functions available.\n",
    "- **Create:** Add new data.\n",
    "- **Read:** Fetch existing data.\n",
    "- **Update:** Edit existing data.\n",
    "- **Delete:** Remove data.\n",
    "\n",
    "Guarantees for how the database will act: **ACID.** These properties ensure databases are protected against hardware failures and software errors.\n",
    "- **Atomicity:** Transactions will be completed fully, or not at all.\n",
    "- **Consistency:** Transactions must leave the database in a valid state.\n",
    "- **Isolation:** Transactions performed concurrently must act the same as transactions performed sequentially.\n",
    "- **Durability:** Transactions must be permanent (i.e. stored on a disk, not in memory)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Types of databases\n",
    "- Relational and non-relational.\n",
    "- These generally correspond to \"SQL-like\" and \"NoSQL-like\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Relational Databases\n",
    "Programmers interface with relational databases through Structured Query Language (SQL).\n",
    "### Examples:\n",
    "Open Source:\n",
    "- MySQL\n",
    "- PostgreSQL (aka Postgres)\n",
    "- SQLite (for local, application-level storage)\n",
    "\n",
    "Commercial:\n",
    "- Oracle Database (aka Oracle)\n",
    "- Microsoft SQL Server\n",
    "- DB2 (IBM)\n",
    "- Microsoft Access, though casual users might not even realize it"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Non-relational Databases\n",
    "Sometimes the structure of relational databases can be limiting. What if some properties are defined for one object but not another? There are a few types of non-relational databases including *column stores* (e.g. Cassandra), *document stores* (e.g. MongoDB), *key-value stores* (e.g. Redis), and *graph databases* (e.g. Neo4j).\n",
    "\n",
    "### Examples:\n",
    "Open Source:\n",
    "- MongoDB\n",
    "- Apache Cassandra\n",
    "- Redis\n",
    "- Apache CouchDB\n",
    "- Neo4j"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Python Example with sqlite3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sqlite3\n",
    "import os\n",
    "\n",
    "database = 'test.sqlite'\n",
    "\n",
    "# Removes the database if it already exists\n",
    "if os.path.exists(database):\n",
    "    os.remove(database)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Create** data with the `CREATE TABLE` and `INSERT` statements."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "with sqlite3.connect(database) as conn:\n",
    "    cursor = conn.cursor()\n",
    "    cursor.execute(\n",
    "        \"\"\"CREATE TABLE people\n",
    "        (first_name text, last_name text, job text, age real)\"\"\")\n",
    "    cursor.execute(\n",
    "        \"\"\"INSERT INTO people VALUES (?,?,?,?)\"\"\",\n",
    "        ('Bradley', 'Dice', 'Guest Lecturer', 25))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can also just use `conn` directly, with a shorter syntax that creates cursors automatically. Also, we use `executemany` with a list of tuples, to perform many actions at once."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Let's add lots of people\n",
    "famous_actors = [\n",
    "    ('Robert', 'Downey Jr.', 'Iron Man', 53),\n",
    "    ('Chris', 'Evans', 'Captain America', 37),\n",
    "    ('Scarlett', 'Johansson', 'Black Widow', 33),\n",
    "    ('Samuel', 'Jackson', 'Nick Fury', 69),\n",
    "    ('Benedict', 'Cumberbatch', 'Dr. Strange', 42),\n",
    "    ('Brie', 'Larson', 'Captain Marvel', 29),\n",
    "    ('Chadwick', 'Boseman', 'Black Panther', 40),\n",
    "]\n",
    "# Yes, I'm a Marvel fan\n",
    "with sqlite3.connect(database) as conn:\n",
    "    conn.executemany(\"\"\"INSERT INTO people VALUES (?,?,?,?)\"\"\", famous_actors)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Read** data with the `SELECT` statement."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[('Bradley', 'Dice', 'Guest Lecturer', 25.0), ('Robert', 'Downey Jr.', 'Iron Man', 53.0), ('Chris', 'Evans', 'Captain America', 37.0), ('Scarlett', 'Johansson', 'Black Widow', 33.0), ('Samuel', 'Jackson', 'Nick Fury', 69.0), ('Benedict', 'Cumberbatch', 'Dr. Strange', 42.0), ('Brie', 'Larson', 'Captain Marvel', 29.0), ('Chadwick', 'Boseman', 'Black Panther', 40.0)]\n"
     ]
    }
   ],
   "source": [
    "with sqlite3.connect(database) as conn:\n",
    "    cursor = conn.cursor()\n",
    "    cursor.execute(\n",
    "        \"\"\"SELECT * FROM people\"\"\")\n",
    "    print(cursor.fetchall())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Update** data with the `UPDATE` statement. We forgot a middle initial! Here we use `WHERE` to identify rows that match a set of criteria."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "with sqlite3.connect(database) as conn:\n",
    "    conn.execute(\n",
    "        \"\"\"UPDATE people SET first_name = ? WHERE first_name = ? AND last_name = ?\"\"\",\n",
    "        (\"Samuel L.\", \"Samuel\", \"Jackson\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can return specific columns by listing them after `SELECT`, and filter the rows with `WHERE`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[('Samuel L.', 'Jackson')]\n"
     ]
    }
   ],
   "source": [
    "with sqlite3.connect(database) as conn:\n",
    "    results = conn.execute(\"\"\"SELECT first_name, last_name FROM people WHERE last_name = ?\"\"\", (\"Jackson\",))\n",
    "    print(list(results))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "SQL also lets you make complex selections, groupings, and filterings. Here is an example."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total count of people: [(8,)]\n",
      "Count by first letters of first names: [('B', 3), ('C', 2), ('R', 1), ('S', 2)]\n",
      "Average age of people: [(41.0,)]\n",
      "Summed ages of people: [(328.0,)]\n"
     ]
    }
   ],
   "source": [
    "with sqlite3.connect(database) as conn:\n",
    "    results = conn.execute(\"\"\"SELECT COUNT(*) FROM people\"\"\")\n",
    "    print('Total count of people:', list(results))\n",
    "    results = conn.execute(\n",
    "        \"\"\"SELECT SUBSTR(first_name, 1, 1) AS first_letter, COUNT(*) FROM people GROUP BY first_letter\"\"\")\n",
    "    print('Count by first letters of first names:', list(results))\n",
    "    results = conn.execute(\"\"\"SELECT AVG(age) FROM people\"\"\")\n",
    "    print('Average age of people:', list(results))\n",
    "    results = conn.execute(\"\"\"SELECT SUM(age) FROM people\"\"\")\n",
    "    print('Summed ages of people:', list(results))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There are tons of functions for math, string manipulations, date/time manipulations, and more. If you want to learn to do something in particular, just Google it. StackExchange is a great place to find SQL examples. The full reference manual for MySQL is here: https://dev.mysql.com/doc/refman/8.0/en/"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[('table', 'people', 'people', 2, 'CREATE TABLE people\\n        (first_name text, last_name text, job text, age real)')]\n"
     ]
    }
   ],
   "source": [
    "# Show us the guts of the database! This command is SQLite-specific.\n",
    "with sqlite3.connect(database) as conn:\n",
    "    results = conn.execute(\"\"\"SELECT * FROM sqlite_master WHERE type = 'table'\"\"\")\n",
    "    print(list(results))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The last operation is **delete**. Here's how we delete data, also called \"dropping\" rows/columns/tables."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total count of people after removing Bradley: [(7,)]\n",
      "The table \"people\" has been dropped.\n"
     ]
    }
   ],
   "source": [
    "with sqlite3.connect(database) as conn:\n",
    "    conn.execute(\"\"\"DELETE FROM people WHERE first_name = ?\"\"\", (\"Bradley\",))\n",
    "    results = conn.execute(\"\"\"SELECT COUNT(*) FROM people\"\"\")\n",
    "    print('Total count of people after removing Bradley:', list(results))\n",
    "    # You can't rename or remove columns in sqlite, but this is how you would do it in most SQL databases:\n",
    "    #conn.execute(\"\"\"ALTER TABLE people DROP COLUMN age\"\"\")\n",
    "    conn.execute(\"\"\"DROP TABLE people\"\"\")\n",
    "    print('The table \"people\" has been dropped.')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### ...so what does it mean to be \"relational\"?\n",
    "Now we're going to dive into some of the most important parts of SQL: keys and relationships. Think about your UMich ID card. It gives you a unique identifying number that isn't your name (there could be many Jane Smiths). It is a permanent number and won't ever change, and nobody else will ever have the same ID number. Similarly, most databases need a **primary key**."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Demos of relational data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Sources\n",
    "\n",
    "- https://www.alooma.com/blog/types-of-modern-databases\n",
    "- https://en.wikipedia.org/wiki/Outline_of_databases\n",
    "- https://www.jamesserra.com/archive/2015/08/relational-databases-vs-non-relational-databases/\n",
    "- https://www.sqlite.org/whentouse.html\n",
    "- https://en.wikipedia.org/wiki/NoSQL\n",
    "- https://docs.python.org/3.7/library/sqlite3.html"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
